import userService from '#userService'
import redis from '#cache'
import { MenuController } from '../menu/menuController.js'
import { Telegraf } from 'telegraf'
import { applyForTournament } from '#userService'
import { logger } from '#utils'
import { prisma } from '#prisma'

export const registerInvitationActions = bot => {
  bot.action(/^invite:(accept|decline):(\d+)$/, async ctx => {
    try {
      const [, action, idStr] = ctx.match
      const invitationId = Number(idStr)
      const metaStr = await redis.get(`invite:${invitationId}`)
      const response = action === 'accept' ? 'ACCEPTED' : 'REJECTED'
      await userService.respondToInvitation(ctx.from.id, invitationId, response)

      if (response === 'ACCEPTED') {
        await ctx.answerCbQuery('–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É')
        await ctx.editMessageReplyMarkup({ inline_keyboard: [] }).catch(() => {})
        await ctx.editMessageText('‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É').catch(() => {})
        // Refresh main menu to reflect team membership
        await MenuController.sendMenu(ctx)
      } else {
        await ctx.answerCbQuery('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
        await ctx.editMessageReplyMarkup({ inline_keyboard: [] }).catch(() => {})
        await ctx.editMessageText('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É').catch(() => {})
      }

      if (metaStr) {
        const meta = JSON.parse(metaStr)
        try {
          const text = response === 'ACCEPTED'
            ? '–ò–≥—Ä–æ–∫ –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'
            : '–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'
          await ctx.telegram.sendMessage(Number(meta.createdByTelegramId), `${text}: ${ctx.from.first_name}`)
        } catch {}
      }
    } catch (e) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', { show_alert: true }).catch(() => {})
    }
  })

  bot.action(/^t_apply:(\d+)$/, async ctx => {
    const id = Number(ctx.match[1])
    try {
      const app = await applyForTournament(ctx.from.id, id)
      await ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] })
      const tournamentName = app.tournament?.name || `#${id}`
      await ctx.reply(`–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä ${tournamentName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`)

      // Notify all admins about the new application
      try {
        const admins = await prisma.user.findMany({ where: { role: 'ADMIN' }, select: { telegramId: true } })
        const teamName = app.team?.name || '‚Äî'
        const captain = app.team?.captain
        const captainLine = captain
          ? `${captain.nickname || captain.name || captain.telegramUsername || captain.id}`
          : '-'
        const notifyText = [
          'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä',
          `–¢—É—Ä–Ω–∏—Ä: ${tournamentName}`,
          `–ö–æ–º–∞–Ω–¥–∞: ${teamName}`,
          `–ö–∞–ø–∏—Ç–∞–Ω: ${captainLine}`
        ].join('\n')
        for (const a of admins) {
          try {
            await ctx.telegram.sendMessage(String(a.telegramId), notifyText)
          } catch {}
        }
      } catch (e) {
        logger.warn('Failed to notify admins about application', e)
      }
    } catch (e) {
      await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', { show_alert: true })
      await ctx.reply(`–û—à–∏–±–∫–∞: ${e.message || '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}`)
    }
  })

  bot.action(/^t_ignore:(\d+)$/, async ctx => {
    try {
      await ctx.answerCbQuery('–û–∫–µ–π, —Å–∫—Ä—ã–≤–∞—é')
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] })
    } catch (e) {
      logger.warn('Ignore click failed', e)
    }
  })
} 